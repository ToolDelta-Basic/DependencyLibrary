/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoUint8 OmegaAvailable();

/* Return type for EventPoll */
struct EventPoll_return {
	char* r0; /* EventType */
	char* r1; /* RetrieverID */
};
extern struct EventPoll_return EventPoll();
extern void OmitEvent();
extern char* ConsumeCommandResponseCB();
extern void SendWebSocketCommandNeedResponse(char* cmd, char* retrieverID);
extern void SendPlayerCommandNeedResponse(char* cmd, char* retrieverID);
extern void SendWOCommand(char* cmd);
extern void SendWebSocketCommandOmitResponse(char* cmd);
extern void SendPlayerCommandOmitResponse(char* cmd);
extern char* SendGamePacket(GoInt packetID, char* jsonStr);

/* Return type for JsonStrAsIsGamePacketBytes */
struct JsonStrAsIsGamePacketBytes_return {
	char* r0; /* pktBytes */
	GoInt r1; /* l */
	char* r2; /* err */
};
extern struct JsonStrAsIsGamePacketBytes_return JsonStrAsIsGamePacketBytes(GoInt packetID, char* jsonStr);
extern void PlaceCommandBlock(char* option);
extern char* ConsumeOmegaConnError();
extern void ListenAllPackets();
extern char* GetPacketNameIDMapping();

/* Return type for ConsumeMCPacket */
struct ConsumeMCPacket_return {
	char* r0; /* packetDataAsJsonStr */
	char* r1; /* convertError */
};
extern struct ConsumeMCPacket_return ConsumeMCPacket();

// Bot
//
extern char* GetClientMaintainedBotBasicInfo();
extern char* GetClientMaintainedExtendInfo();
extern char* GetAllOnlinePlayers();
extern char* GetPlayerByName(char* name);
extern char* GetPlayerByUUID(char* uuid);
extern void ReleaseBindPlayer(char* uuidStr);
extern char* PlayerName(char* uuidStr);
extern GoInt64 PlayerEntityUniqueID(char* uuidStr);
extern GoInt64 PlayerLoginTime(char* uuidStr);
extern char* PlayerPlatformChatID(char* uuidStr);
extern GoInt32 PlayerBuildPlatform(char* uuidStr);
extern char* PlayerSkinID(char* uuidStr);
extern GoUint32 PlayerPropertiesFlag(char* uuidStr);
extern GoUint32 PlayerCommandPermissionLevel(char* uuidStr);
extern GoUint32 PlayerActionPermissions(char* uuidStr);
extern char* PlayerGetAbilityString(char* uuidStr);
extern GoUint32 PlayerOPPermissionLevel(char* uuidStr);
extern GoUint32 PlayerCustomStoredPermissions(char* uuidStr);
extern char* PlayerDeviceID(char* uuidStr);
extern GoUint64 PlayerEntityRuntimeID(char* uuidStr);
extern char* PlayerEntityMetadata(char* uuidStr);
extern GoUint8 PlayerIsOP(char* uuidStr);
extern GoUint8 PlayerOnline(char* uuidStr);
extern void PlayerChat(char* uuidStr, char* msg);
extern void PlayerTitle(char* uuidStr, char* title, char* subTitle);
extern void PlayerActionBar(char* uuidStr, char* actionBar);
extern void SetPlayerAbility(char* uuidStr, char* jsonFlags);
extern void InterceptPlayerJustNextInput(char* uuidStr, char* retrieverID);
extern char* ConsumeChat();
extern void ListenPlayerChange();
extern char* ConsumePlayerChange();
extern void ListenChat();
extern void ListenCommandBlock(char* name);
extern void FreeMem(void* address);
extern char* ConnectOmega(char* address);
extern char* StartOmega(char* address, char* impactOptionsJson);

#ifdef __cplusplus
}
#endif
